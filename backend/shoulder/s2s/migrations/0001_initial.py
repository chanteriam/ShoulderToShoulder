# Generated by Django 5.0.4 on 2024-05-03 19:29

import django.core.validators
import django.db.models.deletion
import secrets
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ApplicationToken",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                (
                    "token",
                    models.CharField(
                        default=secrets.token_urlsafe, max_length=255, unique=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="Calendar",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "day_of_week",
                    models.CharField(
                        choices=[
                            ("Monday", "Monday"),
                            ("Tuesday", "Tuesday"),
                            ("Wednesday", "Wednesday"),
                            ("Thursday", "Thursday"),
                            ("Friday", "Friday"),
                            ("Saturday", "Saturday"),
                            ("Sunday", "Sunday"),
                        ],
                        max_length=10,
                    ),
                ),
                ("hour", models.CharField(max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name="Choice",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("categories", models.JSONField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("event_id", models.CharField(max_length=100)),
                ("title", models.CharField(max_length=100)),
                ("datetime", models.DateTimeField()),
                (
                    "duration_h",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MaxValueValidator(8),
                            django.core.validators.MinValueValidator(1),
                        ]
                    ),
                ),
                ("address", models.CharField(max_length=200)),
                ("latitude", models.DecimalField(decimal_places=10, max_digits=12)),
                ("longitude", models.DecimalField(decimal_places=11, max_digits=13)),
                (
                    "max_attendees",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MaxValueValidator(2),
                            django.core.validators.MinValueValidator(50),
                        ]
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HobbyType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("type", models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name="EventSuggestion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("pref_monday_early_morning", models.BooleanField(default=False)),
                ("pref_monday_morning", models.BooleanField(default=False)),
                ("pref_monday_afternoon", models.BooleanField(default=False)),
                ("pref_monday_evening", models.BooleanField(default=False)),
                ("pref_monday_night", models.BooleanField(default=False)),
                ("pref_monday_late_night", models.BooleanField(default=False)),
                ("pref_tuesday_early_morning", models.BooleanField(default=False)),
                ("pref_tuesday_morning", models.BooleanField(default=False)),
                ("pref_tuesday_afternoon", models.BooleanField(default=False)),
                ("pref_tuesday_evening", models.BooleanField(default=False)),
                ("pref_tuesday_night", models.BooleanField(default=False)),
                ("pref_tuesday_late_night", models.BooleanField(default=False)),
                ("pref_wednesday_early_morning", models.BooleanField(default=False)),
                ("pref_wednesday_morning", models.BooleanField(default=False)),
                ("pref_wednesday_afternoon", models.BooleanField(default=False)),
                ("pref_wednesday_evening", models.BooleanField(default=False)),
                ("pref_wednesday_night", models.BooleanField(default=False)),
                ("pref_wednesday_late_night", models.BooleanField(default=False)),
                ("pref_thursday_early_morning", models.BooleanField(default=False)),
                ("pref_thursday_morning", models.BooleanField(default=False)),
                ("pref_thursday_afternoon", models.BooleanField(default=False)),
                ("pref_thursday_evening", models.BooleanField(default=False)),
                ("pref_thursday_night", models.BooleanField(default=False)),
                ("pref_thursday_late_night", models.BooleanField(default=False)),
                ("pref_friday_early_morning", models.BooleanField(default=False)),
                ("pref_friday_morning", models.BooleanField(default=False)),
                ("pref_friday_afternoon", models.BooleanField(default=False)),
                ("pref_friday_evening", models.BooleanField(default=False)),
                ("pref_friday_night", models.BooleanField(default=False)),
                ("pref_friday_late_night", models.BooleanField(default=False)),
                ("pref_saturday_early_morning", models.BooleanField(default=False)),
                ("pref_saturday_morning", models.BooleanField(default=False)),
                ("pref_saturday_afternoon", models.BooleanField(default=False)),
                ("pref_saturday_evening", models.BooleanField(default=False)),
                ("pref_saturday_night", models.BooleanField(default=False)),
                ("pref_saturday_late_night", models.BooleanField(default=False)),
                ("pref_sunday_early_morning", models.BooleanField(default=False)),
                ("pref_sunday_morning", models.BooleanField(default=False)),
                ("pref_sunday_afternoon", models.BooleanField(default=False)),
                ("pref_sunday_evening", models.BooleanField(default=False)),
                ("pref_sunday_night", models.BooleanField(default=False)),
                ("pref_sunday_late_night", models.BooleanField(default=False)),
                ("pref_num_particip_1to5", models.BooleanField(default=False)),
                ("pref_num_particip_5to10", models.BooleanField(default=False)),
                ("pref_num_particip_10to15", models.BooleanField(default=False)),
                ("pref_num_particip_15p", models.BooleanField(default=False)),
                ("pref_dist_within_1mi", models.BooleanField(default=False)),
                ("pref_dist_within_5mi", models.BooleanField(default=False)),
                ("pref_dist_within_10mi", models.BooleanField(default=False)),
                ("pref_dist_within_15mi", models.BooleanField(default=False)),
                ("pref_dist_within_20mi", models.BooleanField(default=False)),
                ("pref_dist_within_30mi", models.BooleanField(default=False)),
                ("pref_dist_within_40mi", models.BooleanField(default=False)),
                ("pref_dist_within_50mi", models.BooleanField(default=False)),
                ("pref_similarity_to_group_1", models.BooleanField(default=False)),
                ("pref_similarity_to_group_2", models.BooleanField(default=False)),
                ("pref_similarity_to_group_3", models.BooleanField(default=False)),
                ("pref_similarity_to_group_4", models.BooleanField(default=False)),
                ("pref_gender_similar", models.BooleanField(default=False)),
                ("pref_race_similar", models.BooleanField(default=False)),
                ("pref_age_similar", models.BooleanField(default=False)),
                ("pref_sexual_orientation_similar", models.BooleanField(default=False)),
                ("pref_religion_similar", models.BooleanField(default=False)),
                ("pref_political_leaning_similar", models.BooleanField(default=False)),
                ("pref_hobby_category_travel", models.BooleanField(default=False)),
                (
                    "pref_hobby_category_arts_and_culture",
                    models.BooleanField(default=False),
                ),
                ("pref_hobby_category_literature", models.BooleanField(default=False)),
                ("pref_hobby_category_food", models.BooleanField(default=False)),
                (
                    "pref_hobby_category_cooking_and_baking",
                    models.BooleanField(default=False),
                ),
                ("pref_hobby_category_exercise", models.BooleanField(default=False)),
                (
                    "pref_hobby_category_outdoor_activities",
                    models.BooleanField(default=False),
                ),
                ("pref_hobby_category_crafting", models.BooleanField(default=False)),
                ("pref_hobby_category_history", models.BooleanField(default=False)),
                ("pref_hobby_category_community", models.BooleanField(default=False)),
                ("pref_hobby_category_gaming", models.BooleanField(default=False)),
                ("hobby_category_travel", models.BooleanField(default=False)),
                ("hobby_category_arts_and_culture", models.BooleanField(default=False)),
                ("hobby_category_literature", models.BooleanField(default=False)),
                ("hobby_category_food", models.BooleanField(default=False)),
                (
                    "hobby_category_cooking_and_baking",
                    models.BooleanField(default=False),
                ),
                ("hobby_category_exercise", models.BooleanField(default=False)),
                (
                    "hobby_category_outdoor_activities",
                    models.BooleanField(default=False),
                ),
                ("hobby_category_crafting", models.BooleanField(default=False)),
                ("hobby_category_history", models.BooleanField(default=False)),
                ("hobby_category_community", models.BooleanField(default=False)),
                ("hobby_category_gaming", models.BooleanField(default=False)),
                ("dist_within_1mi", models.BooleanField(default=False)),
                ("dist_within_5mi", models.BooleanField(default=False)),
                ("dist_within_10mi", models.BooleanField(default=False)),
                ("dist_within_15mi", models.BooleanField(default=False)),
                ("dist_within_20mi", models.BooleanField(default=False)),
                ("dist_within_30mi", models.BooleanField(default=False)),
                ("dist_within_40mi", models.BooleanField(default=False)),
                ("dist_within_50mi", models.BooleanField(default=False)),
                ("num_particip_1to5", models.BooleanField(default=False)),
                ("num_particip_5to10", models.BooleanField(default=False)),
                ("num_particip_10to15", models.BooleanField(default=False)),
                ("num_particip_15p", models.BooleanField(default=False)),
                ("monday_morning", models.BooleanField(default=False)),
                ("monday_afternoon", models.BooleanField(default=False)),
                ("monday_evening", models.BooleanField(default=False)),
                ("monday_night", models.BooleanField(default=False)),
                ("monday_late_night", models.BooleanField(default=False)),
                ("monday_early_morning", models.BooleanField(default=False)),
                ("tuesday_early_morning", models.BooleanField(default=False)),
                ("tuesday_morning", models.BooleanField(default=False)),
                ("tuesday_afternoon", models.BooleanField(default=False)),
                ("tuesday_evening", models.BooleanField(default=False)),
                ("tuesday_night", models.BooleanField(default=False)),
                ("tuesday_late_night", models.BooleanField(default=False)),
                ("wednesday_early_morning", models.BooleanField(default=False)),
                ("wednesday_morning", models.BooleanField(default=False)),
                ("wednesday_afternoon", models.BooleanField(default=False)),
                ("wednesday_evening", models.BooleanField(default=False)),
                ("wednesday_night", models.BooleanField(default=False)),
                ("wednesday_late_night", models.BooleanField(default=False)),
                ("thursday_early_morning", models.BooleanField(default=False)),
                ("thursday_morning", models.BooleanField(default=False)),
                ("thursday_afternoon", models.BooleanField(default=False)),
                ("thursday_evening", models.BooleanField(default=False)),
                ("thursday_night", models.BooleanField(default=False)),
                ("thursday_late_night", models.BooleanField(default=False)),
                ("friday_early_morning", models.BooleanField(default=False)),
                ("friday_morning", models.BooleanField(default=False)),
                ("friday_afternoon", models.BooleanField(default=False)),
                ("friday_evening", models.BooleanField(default=False)),
                ("friday_night", models.BooleanField(default=False)),
                ("friday_late_night", models.BooleanField(default=False)),
                ("saturday_early_morning", models.BooleanField(default=False)),
                ("saturday_morning", models.BooleanField(default=False)),
                ("saturday_afternoon", models.BooleanField(default=False)),
                ("saturday_evening", models.BooleanField(default=False)),
                ("saturday_night", models.BooleanField(default=False)),
                ("saturday_late_night", models.BooleanField(default=False)),
                ("sunday_early_morning", models.BooleanField(default=False)),
                ("sunday_morning", models.BooleanField(default=False)),
                ("sunday_afternoon", models.BooleanField(default=False)),
                ("sunday_evening", models.BooleanField(default=False)),
                ("sunday_night", models.BooleanField(default=False)),
                ("sunday_late_night", models.BooleanField(default=False)),
                ("duration_1hr", models.BooleanField(default=False)),
                ("duration_2hr", models.BooleanField(default=False)),
                ("duration_3hr", models.BooleanField(default=False)),
                ("duration_4hr", models.BooleanField(default=False)),
                ("duration_5hr", models.BooleanField(default=False)),
                ("duration_6hr", models.BooleanField(default=False)),
                ("duration_7hr", models.BooleanField(default=False)),
                ("duration_8hr", models.BooleanField(default=False)),
                ("attended_event", models.BooleanField(default=False)),
                (
                    "user_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Group",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("group_description", models.TextField()),
                ("max_participants", models.IntegerField()),
                ("members", models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name="Hobby",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "scenario_format",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="s2s.hobbytype"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Onboarding",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("onboarded", models.BooleanField(default=False)),
                ("zip_code", models.CharField(blank=True, max_length=10, null=True)),
                ("city", models.CharField(blank=True, max_length=50, null=True)),
                ("state", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "address_line1",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "event_frequency",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Twice a week", "Twice a week"),
                            ("Once a week", "Once a week"),
                            ("Once every two weeks", "Once every two weeks"),
                            ("Once a month", "Once a month"),
                            ("Once every three months", "Once every three months"),
                        ],
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "event_notification",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Email Only", "Email Only"),
                            ("Text Only", "Text Only"),
                            ("Email and Text", "Email and Text"),
                            ("None", "None"),
                        ],
                        max_length=100,
                        null=True,
                    ),
                ),
                ("num_participants", models.JSONField(blank=True, null=True)),
                (
                    "distance",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Within 1 mile", "Within 1 mile"),
                            ("Within 5 miles", "Within 5 miles"),
                            ("Within 10 miles", "Within 10 miles"),
                            ("Within 15 miles", "Within 15 miles"),
                            ("Within 20 miles", "Within 20 miles"),
                            ("Within 30 miles", "Within 30 miles"),
                            ("Within 40 miles", "Within 40 miles"),
                            ("Within 50 miles", "Within 50 miles"),
                            ("No preference", "No preference"),
                        ],
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "similarity_to_group",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Completely dissimilar", "Completely dissimilar"),
                            ("Moderately dissimilar", "Moderately dissimilar"),
                            ("Neutral", "Neutral"),
                            ("Moderately similar", "Moderately similar"),
                            ("Completely similar", "Completely similar"),
                            ("No preference", "No preference"),
                        ],
                        max_length=100,
                        null=True,
                    ),
                ),
                ("similarity_metrics", models.JSONField(blank=True, null=True)),
                ("gender", models.JSONField(blank=True, null=True)),
                (
                    "gender_description",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("pronouns", models.CharField(blank=True, max_length=50, null=True)),
                ("race", models.JSONField(blank=True, null=True)),
                (
                    "race_description",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("age", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "sexual_orientation",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "sexual_orientation_description",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("religion", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "religion_description",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "political_leaning",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "political_description",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "least_interested_hobbies",
                    models.ManyToManyField(
                        blank=True,
                        related_name="least_interested_hobbies",
                        to="s2s.hobby",
                    ),
                ),
                (
                    "most_interested_hobbies",
                    models.ManyToManyField(
                        blank=True,
                        related_name="most_interested_hobbies",
                        to="s2s.hobby",
                    ),
                ),
                (
                    "most_interested_hobby_types",
                    models.ManyToManyField(blank=True, to="s2s.hobbytype"),
                ),
                (
                    "user_id",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "profile_picture",
                    models.ImageField(
                        default="default_profile.jpeg", upload_to="s2s-profile-photos"
                    ),
                ),
                (
                    "user_id",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Scenarios",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "distance1",
                    models.CharField(
                        choices=[
                            ("Within 1 mile", "Within 1 mile"),
                            ("Within 5 miles", "Within 5 miles"),
                            ("Within 10 miles", "Within 10 miles"),
                            ("Within 15 miles", "Within 15 miles"),
                            ("Within 20 miles", "Within 20 miles"),
                            ("Within 30 miles", "Within 30 miles"),
                            ("Within 40 miles", "Within 40 miles"),
                            ("Within 50 miles", "Within 50 miles"),
                        ]
                    ),
                ),
                (
                    "distance2",
                    models.CharField(
                        choices=[
                            ("Within 1 mile", "Within 1 mile"),
                            ("Within 5 miles", "Within 5 miles"),
                            ("Within 10 miles", "Within 10 miles"),
                            ("Within 15 miles", "Within 15 miles"),
                            ("Within 20 miles", "Within 20 miles"),
                            ("Within 30 miles", "Within 30 miles"),
                            ("Within 40 miles", "Within 40 miles"),
                            ("Within 50 miles", "Within 50 miles"),
                        ]
                    ),
                ),
                (
                    "num_participants1",
                    models.CharField(
                        choices=[
                            ("1-5", "1-5"),
                            ("5-10", "5-10"),
                            ("10-15", "10-15"),
                            ("15+", "15+"),
                        ]
                    ),
                ),
                (
                    "num_participants2",
                    models.CharField(
                        choices=[
                            ("1-5", "1-5"),
                            ("5-10", "5-10"),
                            ("10-15", "10-15"),
                            ("15+", "15+"),
                        ]
                    ),
                ),
                (
                    "day_of_week1",
                    models.CharField(
                        choices=[
                            ("Monday", "Monday"),
                            ("Tuesday", "Tuesday"),
                            ("Wednesday", "Wednesday"),
                            ("Thursday", "Thursday"),
                            ("Friday", "Friday"),
                            ("Saturday", "Saturday"),
                            ("Sunday", "Sunday"),
                        ]
                    ),
                ),
                (
                    "day_of_week2",
                    models.CharField(
                        choices=[
                            ("Monday", "Monday"),
                            ("Tuesday", "Tuesday"),
                            ("Wednesday", "Wednesday"),
                            ("Thursday", "Thursday"),
                            ("Friday", "Friday"),
                            ("Saturday", "Saturday"),
                            ("Sunday", "Sunday"),
                        ]
                    ),
                ),
                (
                    "time_of_day1",
                    models.CharField(
                        choices=[
                            ("Early morning (5-8a)", "Early morning (5-8a)"),
                            ("Morning (9a-12p)", "Morning (9a-12p)"),
                            ("Afternoon (1-4p)", "Afternoon (1-4p)"),
                            ("Evening (5-8p)", "Evening (5-8p)"),
                            ("Night (9p-12a)", "Night (9p-12a)"),
                            ("Late night (1-4a)", "Late night (1-4a)"),
                        ]
                    ),
                ),
                (
                    "time_of_day2",
                    models.CharField(
                        choices=[
                            ("Early morning (5-8a)", "Early morning (5-8a)"),
                            ("Morning (9a-12p)", "Morning (9a-12p)"),
                            ("Afternoon (1-4p)", "Afternoon (1-4p)"),
                            ("Evening (5-8p)", "Evening (5-8p)"),
                            ("Night (9p-12a)", "Night (9p-12a)"),
                            ("Late night (1-4a)", "Late night (1-4a)"),
                        ]
                    ),
                ),
                (
                    "duration_h1",
                    models.IntegerField(
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(8),
                            django.core.validators.MinValueValidator(1),
                        ],
                    ),
                ),
                (
                    "duration_h2",
                    models.IntegerField(
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(8),
                            django.core.validators.MinValueValidator(1),
                        ],
                    ),
                ),
                ("prefers_event1", models.BooleanField()),
                ("prefers_event2", models.BooleanField()),
                (
                    "hobby1",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="hobby1",
                        to="s2s.hobby",
                    ),
                ),
                (
                    "hobby2",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="hobby2",
                        to="s2s.hobby",
                    ),
                ),
                (
                    "user_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SuggestionResults",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("event_date", models.DateTimeField()),
                (
                    "probability_of_attendance",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ]
                    ),
                ),
                (
                    "event_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="s2s.event"
                    ),
                ),
                (
                    "user_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserEvents",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "user_rating",
                    models.CharField(
                        choices=[
                            ("Not Rated", "Not Rated"),
                            ("1", "1"),
                            ("2", "2"),
                            ("3", "3"),
                            ("4", "4"),
                        ]
                    ),
                ),
                (
                    "event_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="s2s.event"
                    ),
                ),
                (
                    "user_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Availability",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("available", models.BooleanField(default=False)),
                (
                    "user_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "calendar_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="s2s.calendar"
                    ),
                ),
            ],
            options={
                "unique_together": {("user_id", "calendar_id")},
            },
        ),
    ]
