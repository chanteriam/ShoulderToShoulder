# Generated by Django 5.0.4 on 2024-04-23 22:35

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Calendar",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "day_of_week",
                    models.CharField(
                        choices=[
                            ("Monday", "Monday"),
                            ("Tuesday", "Tuesday"),
                            ("Wednesday", "Wednesday"),
                            ("Thursday", "Thursday"),
                            ("Friday", "Friday"),
                            ("Saturday", "Saturday"),
                            ("Sunday", "Sunday"),
                        ],
                        max_length=10,
                    ),
                ),
                ("hour", models.CharField(max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name="Choice",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("categories", models.JSONField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Hobby",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "scenario_format",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                ("max_participants", models.IntegerField()),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("Arts & Crafts", "Crafts"),
                            ("Books", "Books"),
                            ("Cooking/Baking", "Cooking"),
                            ("Exercise", "Exercise"),
                            ("Gaming", "Gaming"),
                            ("Music", "Music"),
                            ("Movies", "Movies"),
                            ("Outdoor Activities", "Outdoors"),
                            ("Art", "Art"),
                            ("Travel", "Travel"),
                            ("Writing", "Writing"),
                            ("Other", "Other"),
                        ],
                        default="Other",
                        max_length=20,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=100)),
                ("datetime", models.DateTimeField()),
                (
                    "duration_h",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MaxValueValidator(24),
                            django.core.validators.MinValueValidator(1),
                        ]
                    ),
                ),
                ("address", models.CharField(max_length=200)),
                ("latitude", models.DecimalField(decimal_places=10, max_digits=12)),
                ("longitude", models.DecimalField(decimal_places=11, max_digits=13)),
                (
                    "max_attendees",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MaxValueValidator(2),
                            django.core.validators.MinValueValidator(50),
                        ]
                    ),
                ),
                ("attendees", models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name="Group",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("group_description", models.TextField()),
                ("max_participants", models.IntegerField()),
                ("members", models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name="Onboarding",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "num_participants",
                    models.CharField(
                        choices=[(0, "1-5"), (1, "5-10"), (2, "10-15"), (3, "15+")]
                    ),
                ),
                (
                    "distance",
                    models.CharField(
                        choices=[
                            (0, "Within 1 mile"),
                            (1, "Within 5 miles"),
                            (2, "Within 10 miles"),
                            (3, "Within 15 miles"),
                            (4, "Within 20 miles"),
                            (5, "Within 30 miles"),
                            (6, "Within 40 miles"),
                            (7, "Within 50 miles"),
                        ]
                    ),
                ),
                (
                    "similarity_to_group",
                    models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4)]),
                ),
                ("similarity_metrics", models.CharField()),
                ("gender", models.CharField()),
                ("gender_description", models.CharField(max_length=50)),
                ("race", models.CharField()),
                ("race_description", models.CharField(max_length=50)),
                ("age", models.CharField()),
                ("sexual_orientation", models.CharField()),
                ("sexual_orientation_description", models.CharField(max_length=50)),
                ("religion", models.CharField()),
                ("religion_description", models.CharField(max_length=50)),
                ("political_leaning", models.CharField()),
                ("political_description", models.CharField(max_length=50)),
                (
                    "user_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "profile_picture",
                    models.ImageField(
                        default="default_profile.jpeg", upload_to="s2s-profile-photos"
                    ),
                ),
                (
                    "user_id",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Scenarios",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("hobby1", models.CharField(max_length=20)),
                ("hobby2", models.CharField(max_length=20)),
                (
                    "distance1",
                    models.CharField(
                        choices=[
                            (0, "Within 1 mile"),
                            (1, "Within 5 miles"),
                            (2, "Within 10 miles"),
                            (3, "Within 15 miles"),
                            (4, "Within 20 miles"),
                            (5, "Within 30 miles"),
                            (6, "Within 40 miles"),
                            (7, "Within 50 miles"),
                        ]
                    ),
                ),
                (
                    "distance2",
                    models.CharField(
                        choices=[
                            (0, "Within 1 mile"),
                            (1, "Within 5 miles"),
                            (2, "Within 10 miles"),
                            (3, "Within 15 miles"),
                            (4, "Within 20 miles"),
                            (5, "Within 30 miles"),
                            (6, "Within 40 miles"),
                            (7, "Within 50 miles"),
                        ]
                    ),
                ),
                (
                    "num_participants1",
                    models.CharField(
                        choices=[(0, "1-5"), (1, "5-10"), (2, "10-15"), (3, "15+")]
                    ),
                ),
                (
                    "num_participants2",
                    models.CharField(
                        choices=[(0, "1-5"), (1, "5-10"), (2, "10-15"), (3, "15+")]
                    ),
                ),
                (
                    "day_of_week1",
                    models.CharField(
                        choices=[
                            (0, "Monday"),
                            (1, "Tuesday"),
                            (2, "Wednesday"),
                            (3, "Thursday"),
                            (4, "Friday"),
                            (5, "Saturday"),
                            (6, "Sunday"),
                        ]
                    ),
                ),
                (
                    "day_of_week2",
                    models.CharField(
                        choices=[
                            (0, "Monday"),
                            (1, "Tuesday"),
                            (2, "Wednesday"),
                            (3, "Thursday"),
                            (4, "Friday"),
                            (5, "Saturday"),
                            (6, "Sunday"),
                        ]
                    ),
                ),
                (
                    "time_of_day1",
                    models.CharField(
                        choices=[
                            (0, "Early morning (5-8a)"),
                            (1, "Morning (9a-12p)"),
                            (2, "Afternoon (1-4p)"),
                            (3, "Evening (5-8p)"),
                            (4, "Night (9p-12a)"),
                            (5, "Late night (1-4a)"),
                        ]
                    ),
                ),
                (
                    "time_of_day2",
                    models.CharField(
                        choices=[
                            (0, "Early morning (5-8a)"),
                            (1, "Morning (9a-12p)"),
                            (2, "Afternoon (1-4p)"),
                            (3, "Evening (5-8p)"),
                            (4, "Night (9p-12a)"),
                            (5, "Late night (1-4a)"),
                        ]
                    ),
                ),
                ("prefers_event1", models.BooleanField()),
                ("prefers_event2", models.BooleanField()),
                (
                    "user_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Availability",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("available", models.BooleanField(default=False)),
                (
                    "user_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "calendar_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="s2s.calendar"
                    ),
                ),
            ],
            options={
                "unique_together": {("user_id", "calendar_id")},
            },
        ),
    ]
