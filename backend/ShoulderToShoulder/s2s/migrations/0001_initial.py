# Generated by Django 5.0.3 on 2024-04-18 02:48

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Calendar",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "day_of_week",
                    models.CharField(
                        choices=[
                            ("Monday", "Monday"),
                            ("Tuesday", "Tuesday"),
                            ("Wednesday", "Wednesday"),
                            ("Thursday", "Thursday"),
                            ("Friday", "Friday"),
                            ("Saturday", "Saturday"),
                            ("Sunday", "Sunday"),
                        ],
                        max_length=10,
                    ),
                ),
                ("hour", models.CharField(max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name="Hobby",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("max_participants", models.IntegerField()),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("Sport", "Sport"),
                            ("Music", "Music"),
                            ("Art", "Art"),
                            ("Literature", "Literature"),
                            ("Science", "Science"),
                            ("Technology", "Technology"),
                            ("Crafts", "Crafts"),
                            ("Gaming", "Gaming"),
                            ("Cooking", "Cooking"),
                            ("Other", "Other"),
                        ],
                        default="Other",
                        max_length=20,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("username", models.CharField(max_length=50, unique=True)),
                ("email", models.EmailField(max_length=50, unique=True)),
                ("onboarded", models.BooleanField(default=False, null=True)),
                (
                    "phone_number",
                    models.IntegerField(
                        default=1,
                        validators=[
                            django.core.validators.MinValueValidator(1000000000),
                            django.core.validators.MaxValueValidator(9999999999),
                        ],
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=100)),
                ("datetime", models.DateTimeField()),
                (
                    "duration_h",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MaxValueValidator(24),
                            django.core.validators.MinValueValidator(1),
                        ]
                    ),
                ),
                ("address", models.CharField(max_length=200)),
                ("latitude", models.DecimalField(decimal_places=10, max_digits=12)),
                ("longitude", models.DecimalField(decimal_places=11, max_digits=13)),
                (
                    "max_attendees",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MaxValueValidator(2),
                            django.core.validators.MinValueValidator(50),
                        ]
                    ),
                ),
                ("attendees", models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name="Group",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("group_description", models.TextField()),
                ("max_participants", models.IntegerField()),
                ("members", models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name="Onboarding",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "num_participants",
                    models.CharField(
                        choices=[(0, "1-5"), (1, "5-10"), (2, "10-15"), (3, "15+")]
                    ),
                ),
                (
                    "distance",
                    models.CharField(
                        choices=[
                            (0, "Within 1 mile"),
                            (1, "Within 5 miles"),
                            (2, "Within 10 miles"),
                            (3, "Within 15 miles"),
                            (4, "Within 20 miles"),
                            (5, "Within 30 miles"),
                            (6, "Within 40 miles"),
                            (7, "Within 50 miles"),
                        ]
                    ),
                ),
                (
                    "similarity_to_group",
                    models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4)]),
                ),
                ("similarity_metrics", models.CharField()),
                ("gender", models.CharField()),
                ("gender_description", models.CharField(max_length=50)),
                ("race", models.CharField()),
                ("race_description", models.CharField(max_length=50)),
                ("age", models.CharField()),
                ("sexual_orientation", models.CharField()),
                ("sexual_orientation_description", models.CharField(max_length=50)),
                ("religion", models.CharField()),
                ("religion_description", models.CharField(max_length=50)),
                ("political_leaning", models.CharField()),
                ("political_description", models.CharField(max_length=50)),
                (
                    "user_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Availability",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("available", models.BooleanField(default=False)),
                (
                    "user_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "calendar_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="s2s.calendar"
                    ),
                ),
            ],
            options={
                "unique_together": {("user_id", "calendar_id")},
            },
        ),
    ]
